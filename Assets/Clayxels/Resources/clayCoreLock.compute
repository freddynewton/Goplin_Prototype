#pragma kernel computeGrid
#pragma kernel generatePointCloud
#pragma kernel debugDisplayGridPoints
#pragma kernel computeGridForMesh
#pragma kernel computeMesh
#pragma kernel filterSolidsPerChunk
#pragma kernel compactPointCloud
#pragma kernel optimizePointCloud
#pragma kernel generatePointCloudMicroVoxels
#pragma kernel optimizeMicrovoxels
#pragma kernel computeGridMip3
#pragma kernel computeMeshRealTime
#pragma kernel computeMeshRealTime2
RWStructuredBuffer<int> indirectChunkArgs2,indirectChunkArgs1;RWStructuredBuffer<float3> gridData;RWStructuredBuffer<int> boundingBox;RWStructuredBuffer<int2> pointCloudDataMip3;RWStructuredBuffer<int> gridPointersMip2,gridPointersMip3;RWStructuredBuffer<int2> chunkPointCloudData;RWStructuredBuffer<int> pointCloudDataToSolidId,chunkPointCloudDataToSolidId;StructuredBuffer<int> triangleConnectionTable;RWStructuredBuffer<int> indirectDrawArgs,numSolidsPerChunk,updateChunks,solidsPerChunk,prefilteredSolidIds,solidsFilter;RWStructuredBuffer<float3> chunksCenter;RWStructuredBuffer<int> numPointsInChunk,pointToChunkId;RWStructuredBuffer<float2> gridDataLowRes;RWStructuredBuffer<int> volumetricDraw,chunkIdOffset,microvoxelCounters;RWStructuredBuffer<int2> pointCloudDataMip3Opt;RWStructuredBuffer<int> gridPointersMip2Opt,gridPointersMip3Opt,chunkSizeGlobBuffer;RWStructuredBuffer<float3> chunksCenterGlob;RWStructuredBuffer<int> boundingBoxGlob,instancesMatrixGlob,instancesMatrixInvGlob,microvoxelCountersGlob,chunkIdOffsetGlob,gridPointersMip3Glob,gridPointersMip2Glob;RWStructuredBuffer<int2> pointCloudDataMip3Glob;RWStructuredBuffer<int> chunkIdToContainerIdGlob,localChunkIdGlob,instanceToContainerIdGlob;RWStructuredBuffer<float> chunkSizeGlob;StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs,solidsAttrs2;StructuredBuffer<int> solidsClayObjectId,solidsUpdated;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;RWStructuredBuffer<float3> meshOutNormals,meshPoints;RWStructuredBuffer<float4> meshNormals;RWStructuredBuffer<float3> meshNormalsTemp;RWStructuredBuffer<int3> smoothMeshGridData;uint maxSolids=0,maxSolidsPerVoxel=0,maxSolidsPerVoxelMask=0,chunkId=0,numSolids=0,numSolidsBlending=0;float chunkSize=20.;int numChunksX=0,numChunksY=0,numChunksZ=0,outMeshIndexOffset=0;float solidsMaxInfluence=0.;uint numSolidsUpdated=0;int storeSolidId=0,maxPointCount=0;float seamOffsetMultiplier=1.,bufferSizeReduceFactor=1.,globalBlendReduce=0.;int globalChunkId=0,numChunks=0;float meshNormalSmooth,meshVoxelize;groupshared int3 gs_pointCloudData[255];groupshared uint gs_numElements=0,gs_globalOffset=0;
#include"claySDF.compute"
static const int3 cellTable[]={int3(0,0,0),int3(0,0,1),int3(0,0,2),int3(0,0,3),int3(0,1,0),int3(0,1,1),int3(0,1,2),int3(0,1,3),int3(0,2,0),int3(0,2,1),int3(0,2,2),int3(0,2,3),int3(0,3,0),int3(0,3,1),int3(0,3,2),int3(0,3,3),int3(1,0,0),int3(1,0,1),int3(1,0,2),int3(1,0,3),int3(1,1,0),int3(1,1,1),int3(1,1,2),int3(1,1,3),int3(1,2,0),int3(1,2,1),int3(1,2,2),int3(1,2,3),int3(1,3,0),int3(1,3,1),int3(1,3,2),int3(1,3,3),int3(2,0,0),int3(2,0,1),int3(2,0,2),int3(2,0,3),int3(2,1,0),int3(2,1,1),int3(2,1,2),int3(2,1,3),int3(2,2,0),int3(2,2,1),int3(2,2,2),int3(2,2,3),int3(2,3,0),int3(2,3,1),int3(2,3,2),int3(2,3,3),int3(3,0,0),int3(3,0,1),int3(3,0,2),int3(3,0,3),int3(3,1,0),int3(3,1,1),int3(3,1,2),int3(3,1,3),int3(3,2,0),int3(3,2,1),int3(3,2,2),int3(3,2,3),int3(3,3,0),int3(3,3,1),int3(3,3,2),int3(3,3,3)},localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int3 neighbourMip3[27]={int3(0,0,0),int3(0,1,0),int3(0,-1,0),int3(1,0,0),int3(-1,0,0),int3(0,0,1),int3(0,0,-1),int3(1,1,1),int3(0,1,1),int3(-1,1,1),int3(1,1,-1),int3(0,1,-1),int3(-1,1,-1),int3(1,1,0),int3(-1,1,0),int3(1,-1,1),int3(0,-1,1),int3(-1,-1,1),int3(1,-1,-1),int3(0,-1,-1),int3(-1,-1,-1),int3(1,-1,0),int3(-1,-1,0),int3(1,0,1),int3(-1,0,1),int3(1,0,-1),int3(-1,0,-1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};int f(int x,int i,int y,int z){return x+z*(i+z*y);}uint f(float3 i){uint e=uint(i.x*255)+uint(i.y*255)*256+uint(i.z*255)*256*256;return e;}uint f(uint i,uint x,uint y,uint z,uint e){uint t=(((i<<6|x)<<6|y)<<6|z)<<8|e;return t;}uint s(uint i,uint x,uint y,uint z,uint e){uint t=(((i<<6|x)<<8|y)<<8|z)<<4|e;return t;}uint f(uint i,uint x,uint e){uint t=(i<<6|x)<<18|e;return t;}uint f(uint f,uint e){uint t=f<<24|e;return t;}void s(int f,out int i[5]){i[4]=f&255,f>>=8,i[3]=f&63,f>>=6,i[2]=f&63,f>>=6,i[1]=f&63,f>>=6,i[0]=f&63;}uint s(float i,float y,float f,float x){uint r=uint(round(i*63.)),u=uint(round(y*63.)),z=uint(round(f*63.)),e=uint((x+1.)*.5*16383.),t=((r<<6|u)<<6|z)<<14|e;return t;}float4 s(uint i){float f=float(i&16383)/16383*2.-1.;i>>=14;float y=float(i&63)/63;i>>=6;float x=float(i&63)/63,u=float(i>>6)/63;return float4(u,x,y,f);}float t(float3 i,float3 e){float3 u=abs(i)-e;return max(u.x,max(u.y,u.z));}float t(float i,float f,float x,float e){float y=max(x-abs(i-f),0.);return min(i,f)-y*y*.25f*e;}float c(float x,float i,float f,float e){float y=max(f-abs(-x-i),0.);return max(-x,i)+y*y*.25*e;}bool c(uint e,uint f){uint x=f*rcp(32);int i=solidsFilter[e*maxSolidsPerVoxelMask+x],u=f-32*x;bool t=false;if(i>>u&1)t=true;return t;}void d(uint e,uint f){uint x=f/32;int c=solidsFilter[e*maxSolidsPerVoxelMask+x],i=f-32*x;solidsFilter[e*maxSolidsPerVoxelMask+x]=c&~(1<<i);}bool c(int x){return x>>0&1;}bool d(int x){return x>>2&1;}bool t(int x){return x>>3&1;}float c(float3 i,float x,float y,uint f,uint s){float e=999.;uint z=s*maxSolidsPerVoxel;float u=999.,g=0.,m=0.;bool M=false;for(uint r=0;r<f;++r){uint n=prefilteredSolidIds[z+r];float3 o=solidsScale[n];float k=(o.x+o.y+o.z)*.333333,v=solidsBlend[n],S=rcp(v);float4 b=solidsAttrs[n],p=solidsAttrs2[n];bool D=true;float a=999.;if(d(b.w))y+=abs(v),u=e,e=999.,g=v,m=S,D=false,M=true,v=0.,S=1.;else if(t(b.w))a=e,e=u,v=g,S=m,D=false,M=false;if(D)a=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],o,b,p,k);if(!c(b.w)){if(v==0.)e=min(a,e);else if(v>0.)e=t(a,e,v,S);else e=c(a,e,abs(v),abs(S));}if(D&&a>y)d(s,r);if(D)y-=abs(v);}return e;}float c(float3 i,float x,float e,out int f,out float3 u,uint y,uint s,uint z){float r=999.;u=float3(1.,1.,1.);uint n=s*maxSolidsPerVoxel;float g=999.,v=0.,m=0.;float3 M=0.;bool k=false;int a=0,p=0;for(uint o=0;o<y;++o){if(!c(s,o)){continue;}uint S=prefilteredSolidIds[n+o];float3 b=solidsScale[S];float D=(b.x+b.y+b.z)*.333333,l=solidsBlend[S],w=rcp(l);float3 h=solidsColor[S];float4 X=solidsAttrs[S],Y=solidsAttrs2[S];bool Z=true;float C=999.;if(d(X.w))g=r,r=999.,v=l,m=w,M=u,Z=false,k=true,a=S,p=f;else if(t(X.w))C=r,r=g,l=v,w=m,S=a,Z=false,k=false;if(Z)C=computeClayDistanceFunction(solidsType[S],i,solidsPos[S],solidsRot[S],b,X,Y,D);if(!k&&C<r)f=S;float O=0.;bool I=c(X.w);if(l==0.){O=clamp((r-C)*e,0.,1.);if(!I)r=min(C,r);}else if(l>0.){O=1.-clamp(.5+.5*(C-r)*w,0.,1.);if(!I)r=t(C,r,l,w);}else{O=1.-clamp(.5+.5*(-C-r)*w,0.,1.);if(!I)r=c(C,r,abs(l),abs(w));if(O>.5)f=S;}if(!Z)h=lerp(M,u,O),O=1.-O;u=lerp(u,h,O);}return r;}float3 r(uint i){int u=(i&255)>>0,f=(i&65280)>>8,M=(i&16711680)>>16;return float3(u/255.,f/255.,M/255.);}int3 g(uint i){int f=(i&255)>>0,u=(i&65280)>>8,x=(i&16711680)>>16;return int3(f,u,x);}bool n(int3 i){if(i.x<0)return true;if(i.x>255)return true;if(i.y<0)return true;if(i.y>255)return true;if(i.z<0)return true;if(i.z>255)return true;return false;}float p(int4 x){float e=0.;for(uint f=0;f<numSolids;++f)e+=abs(solidsBlend[f]);return e;}float3 g(int3 x,float i){float e=i*.5,f=chunkSize*.5;float3 t=float3(i*x.x-f,i*x.y-f,i*x.z-f)+e;return t;}void d(float3 f,float x,uint c,inout uint i,inout float y){uint e=numSolidsPerChunk[chunkId],u=c*maxSolidsPerVoxel;int n=c*maxSolidsPerVoxelMask;float s=0.,z=0.;bool r=false;float m=0.,v=2.-globalBlendReduce;uint o=0;for(o=0;o<e;++o){uint S=solidsPerChunk[chunkId*maxSolids+o];float g=abs(solidsBlend[S]),M=solidsAttrs[S].w;float3 a=f;if(int(M)>>1&1)a.x=abs(a.x);float3 k=solidsScale[S],b=solidsPos[S];float4 D=solidsRot[S];float3 p=a-b,l=mulQuat(p,D);float C=t(l,k)-x*1.732;if(C<v){m+=g;if(m>1.){m=1.;break;}}}float g=v*m;for(o=0;o<e;++o){uint S=solidsPerChunk[chunkId*maxSolids+o];solidsFilter[n+o*rcp(32)]=-1;float3 M=solidsScale[S];float D=solidsAttrs[S].w;float3 a=f;if(int(D)>>1&1)a.x=abs(a.x);float k=abs(solidsBlend[S]);float3 b=solidsPos[S];float4 p=solidsRot[S];float3 C=a-b,l=mulQuat(C,p);float O=t(l,M)-x*1.732*2.;if(r)s+=g,z+=k;bool w=true;if(d(D))s=0.,z=0.,O=0.,r=true;else if(t(D))g=s,k=z,O=0.,w=false,r=false;if(O<g){prefilteredSolidIds[u+i]=S;i+=1;if(w)y+=g;if(i==maxSolidsPerVoxel){break;}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGrid(int3 i:SV_DispatchThreadID){float x=chunkSize*.5,u=chunkSize*.015625,o=u*.5,s=chunkSize*.00390625,M=s*.5,r=u*1.732,e=rcp(s);float3 t=float3(u*i.x-x,u*i.y-x,u*i.z-x);int y=f(i.x,i.y,i.z,64);float3 k=chunksCenter[chunkId];uint z=0;float D=0.;float3 S=t+o+k;d(S,u*.5,y,z,D);float b=c(S,u,D+u,z,y);gridDataLowRes[y]=float2(b,z);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridMip3(uint3 i:SV_DispatchThreadID){float x=chunkSize*.5,u=chunkSize*.015625,y=chunkSize*.00390625,z=y*.5,M=u*1.732,e=rcp(y);int S=f(i.x/4,i.y/4,i.z/4,64),n=f(i.x,i.y,i.z,256);float2 t=gridDataLowRes[S];float r=t.x;int s=t.y;gridData[n]=float3(r,0,0);if(abs(r)<M){int k=0;float3 D=float3(1.,1.,1.),m=i*y+y-z-x,o=chunksCenter[chunkId];float b=c(m+o,z,e,k,D,s,S,n);int g=solidsClayObjectId[k]+1;gridData[n]=float3(b,f(D),g);}}float n(float f,float c){float i=c-f,e=.5;if(i!=0.)e=f/i;return e;}float2 i(float2 i){float2 e=i.xy>=0.?1.:-1.,f=(1.-abs(i.yx))*e;return f;}float m(float2 i){int e=32;float f=floor(i.x*(e-1)),u=floor(i.y*(e-1)),t=f*e+u;return t;}float k(float3 f){f/=abs(f.x)+abs(f.y)+abs(f.z);f.xy=f.z>=0.?f.xy:i(f.xy);f.xy=f.xy*.5+.5;float e=m(f.xy);return e;}int d(uint f,uint x,uint y,uint e){int t=f<<24|x<<16|y<<8|e;return t;}uint g(uint i,uint x,uint y,uint e){uint t=((i<<6|x)<<6|y)<<14|e;return t;}uint i(uint i,uint x,uint y,uint e){uint t=((i<<5|x)<<4|y)<<18|e;return t;}float e(float3 i){float e=dot(round(i*255),float3(65536,256,1));return e;}void e(int3 u,float x){if(u.x>254||u.y>254||u.z>254||u.x<1||u.y<1||u.z<1){return;}int e=f(u.x,u.y,u.z,256);float3 t=gridData[e];if(t.z==0.){return;}float s[8];uint c=0;for(int m=0;m<8;++m){int3 r=u+localGridCellCoords[m];int y=f(r.x,r.y,r.z,256);float3 v=gridData[y];if(v.z==0.){return;}s[m]=v.x;if(v.x<=0.)c|=1<<m;}int r=cubeEdgeFlags[c];if(r==0){return;}int y=c*16,S=triangleConnectionTable[y+3];float b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);float3 z=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S];S=triangleConnectionTable[y+4];b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);float3 o=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S];S=triangleConnectionTable[y+5];b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);float3 a=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S],v=z+o+a,M=cross(a-z,o-z);if(dot(M,M)>0.){S=triangleConnectionTable[y];b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);z=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S];S=triangleConnectionTable[y+1];b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);o=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S];S=triangleConnectionTable[y+2];b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);a=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S];M+=cross(a-z,o-z);S=triangleConnectionTable[y+6];b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);z=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S];S=triangleConnectionTable[y+7];b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);o=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S];S=triangleConnectionTable[y+8];b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);a=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S];M+=cross(a-z,o-z);S=triangleConnectionTable[y+9];b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);z=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S];S=triangleConnectionTable[y+10];b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);o=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S];S=triangleConnectionTable[y+11];b=n(s[edgeConnection[S].x],s[edgeConnection[S].y]);a=vertexOffset[edgeConnection[S].x]-b*edgeDirection[S];M+=cross(a-z,o-z);M=normalize(M);v/=3;int D=t.y,k=t.z;float3 p=v-float3(.5,.5,.5);float R=dot(p,M);float3 I=M;I/=abs(I.x)+abs(I.y)+abs(I.z);I.xy=I.z>=0.?I.xy:i(I.xy);I.xy=I.xy*.5+.5;R=R*.5+.5;int3 C=g(D);int l=0;InterlockedAdd(gs_numElements,1,l);if(l<255)gs_pointCloudData[l]=int3(d(u.x,u.y,u.z,uint(round(I.x*255.))),f(uint(round(R*63.)),uint(round(C.x/256.*63.)),uint(round(C.y/256.*63.)),uint(round(C.z/256.*63.)),uint(round(I.y*255.))),k);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloud(int3 u:SV_DispatchThreadID,uint c:SV_GroupIndex){if(u.x>254||u.y>254||u.z>254||u.x<1||u.y<1||u.z<1){return;}float e=chunkSize/256;int S=f(u.x,u.y,u.z,256);float3 s=gridData[S];if(s.z==0.){return;}float t[8];uint x=0;for(int y=0;y<8;++y){int3 r=u+localGridCellCoords[y];int k=f(r.x,r.y,r.z,256);float3 v=gridData[k];if(v.z==0.){return;}t[y]=v.x;if(v.x<=0.)x|=1<<y;}int r=cubeEdgeFlags[x];if(r==0){return;}int z=x*16,m=triangleConnectionTable[z+3];float b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);float3 v=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m];m=triangleConnectionTable[z+4];b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);float3 o=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m];m=triangleConnectionTable[z+5];b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);float3 a=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m],M=v+o+a,D=cross(a-v,o-v);if(dot(D,D)>0.){m=triangleConnectionTable[z];b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);v=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m];m=triangleConnectionTable[z+1];b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);o=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m];m=triangleConnectionTable[z+2];b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);a=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m];D+=cross(a-v,o-v);m=triangleConnectionTable[z+6];b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);v=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m];m=triangleConnectionTable[z+7];b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);o=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m];m=triangleConnectionTable[z+8];b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);a=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m];D+=cross(a-v,o-v);m=triangleConnectionTable[z+9];b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);v=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m];m=triangleConnectionTable[z+10];b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);o=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m];m=triangleConnectionTable[z+11];b=n(t[edgeConnection[m].x],t[edgeConnection[m].y]);a=vertexOffset[edgeConnection[m].x]-b*edgeDirection[m];D+=cross(a-v,o-v);D=normalize(D);M/=3;int k=s.y,p=s.z;float3 C=M-float3(.5,.5,.5);float R=dot(C,D);float3 I=D;I/=abs(I.x)+abs(I.y)+abs(I.z);I.xy=I.z>=0.?I.xy:i(I.xy);I.xy=I.xy*.5+.5;R=R*.5+.5;int3 l=g(k);uint w=0;InterlockedAdd(numPointsInChunk[chunkId],3,w);w/=3;int2 O=int2(d(u.x,u.y,u.z,uint(round(I.x*255.))),f(uint(round(R*63.)),uint(round(l.x/256.*63.)),uint(round(l.y/256.*63.)),uint(round(l.z/256.*63.)),uint(round(I.y*255.))));chunkPointCloudData[chunkId*maxPointCount+w]=O;if(storeSolidId==1)chunkPointCloudDataToSolidId[chunkId*maxPointCount+w]=p;}}int4 v(uint f){uint i=f>>24,u=(16711680&f)>>16,y=(65280&f)>>8,z=255&f;return int4(i,u,y,z);}void i(uint f,uint t){uint S=f/5,i=round(float(float(f)/5.-S)*5),m=pointToChunkId[S],s[5];s[0]=m&63;m>>=6;s[1]=m&63;m>>=6;s[2]=m&63;m>>=6;s[3]=m&63;m>>=6;s[4]=m&63;s[i]=t;uint e=(((s[4]<<6|s[3])<<6|s[2])<<6|s[1])<<6|s[0];pointToChunkId[S]=e;}uint k(uint f,uint x){uint z=f/5,i=6*round(float(float(f)/5.-z)*5),e=(1<<6)-1&x>>i;return e;}[numthreads(1,1,1)]void compactPointCloud(int3 f:SV_DispatchThreadID){int e=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;uint u=numPointsInChunk[e],m;InterlockedAdd(indirectDrawArgs[0],u,m);uint t=u/3;m/=3;for(uint x=0;x<t;++x){uint S=m+x;pointCloudDataMip3[S]=chunkPointCloudData[e*maxPointCount+x];i(S,e);if(storeSolidId==1)pointCloudDataToSolidId[S]=chunkPointCloudDataToSolidId[e*maxPointCount+x];}}[numthreads(1,1,1)]void optimizePointCloud(int3 f:SV_DispatchThreadID){uint t=indirectDrawArgs[0],u=t/3,m=u;for(uint S=0;S<u;++S){int4 s=v(pointCloudDataMip3[S].x);float e=frac(sin(dot(float2(s.x,s.y),float2(12.9898,78.233+s.z)))*43758.5);uint x=round(e*(m-1));m-=1;uint z=k(m,pointToChunkId[m/5]);int2 c=pointCloudDataMip3[m];pointCloudDataMip3[m]=pointCloudDataMip3[x];pointCloudDataMip3[x]=c;uint y=k(x,pointToChunkId[x/5]);i(m,y);i(x,z);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void debugDisplayGridPoints(int3 i:SV_DispatchThreadID){}float4 a(uint i){int f=(i&255)>>0,u=(i&65280)>>8,M=(i&16711680)>>16;return float4(f/255.,u/255.,M/255.,1.);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridForMesh(int3 i:SV_DispatchThreadID){float x=chunkSize/64;float3 t=g(i,x);int y=f(i.x,i.y,i.z,64);float3 e=chunksCenter[chunkId];uint u=0;float z=0.;d(t+e,x*.5,y,u,z);float s=x*.25,b=s*.5,M=x*.5,r=chunkSize/256,o=chunkSize*.5;int S=y*maxSolidsPerVoxelMask;for(uint m=0;m<maxSolidsPerVoxelMask;++m)solidsFilter[S+m]=-1;float k=c(t+e,x,z+x,u,y);for(uint n=0;n<8;++n){float3 v=t+s*cardinalCellOffset[n];for(uint D=0;D<8;++D){float3 a=v+b*cardinalCellOffset[D];int3 I=int3(round((a.x+o-b)/r),round((a.y+o-b)/r),round((a.z+o-b)/r));int p=f(I.x,I.y,I.z,256);gridData[p]=float3(0,0,0);int l=0;float3 w=float3(1.,1.,1.);float C=c(a+e,b,rcp(s),l,w,u,y,p);int O=solidsClayObjectId[l]+1;gridData[p]=float3(C,f(w),O);}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void x(int3 i:SV_DispatchThreadID){}inline float3 a(int3 i,out float3 m){float e=chunkSize/256;int S=f(i.x,i.y,i.z,256);float3 u=gridData[S];m=a(u.y).xyz;float s[8];int x=0,M=0;for(int y=0;y<8;++y){int3 t=i+localGridCellCoords[y];int c=f(t.x,t.y,t.z,256);float3 r=gridData[c];s[y]=r.x;if(r.z==0.){continue;}if(r.x<0.)x|=1<<y;}int t=cubeEdgeFlags[x];float3 c=g(i,e);float k=1.-meshVoxelize;int b=0;float3 z=float3(0,0,0);for(int r=0;r<12;++r){if((t&1<<r)!=0){float v=s[edgeConnection[r].x],D=s[edgeConnection[r].y],o=n(v,D);z+=c+(vertexOffset[edgeConnection[r].x]-o*edgeDirection[r])*e*k;b+=1;}}z/=b;return z;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMesh(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253){return;}else if(i.x<1||i.y<1||i.z<1){return;}int S=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[S],x,s,y,z,e=chunksCenter[chunkId],t=a(int3(i.x,i.y,i.z),x)+e,r,m,b,c;int n=f(i.x,i.y+1,i.z+1,256);float3 I=gridData[n];if(sign(u.x)!=sign(I.x)){r=a(int3(i.x,i.y,i.z+1),s)+e;m=a(int3(i.x,i.y+1,i.z+1),y)+e;b=a(int3(i.x,i.y+1,i.z),z)+e;if(u.x>I.x)c=b,b=r,r=c,c=z,z=s,s=c;uint g=meshOutIndices.IncrementCounter();int v=g*3;meshOutPoints[v]=t;meshOutIndices[g][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=g*3+1;meshOutPoints[v]=r;meshOutIndices[g][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(s,1);v=g*3+2;meshOutPoints[v]=m;meshOutIndices[g][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);g=meshOutIndices.IncrementCounter();v=g*3;meshOutPoints[v]=t;meshOutIndices[g][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=g*3+1;meshOutPoints[v]=m;meshOutIndices[g][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);v=g*3+2;meshOutPoints[v]=b;meshOutIndices[g][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(z,1);}n=f(i.x+1,i.y,i.z+1,256);I=gridData[n];if(sign(u.x)!=sign(I.x)){r=a(int3(i.x,i.y,i.z+1),s)+e;m=a(int3(i.x+1,i.y,i.z+1),y)+e;b=a(int3(i.x+1,i.y,i.z),z)+e;if(u.x<I.x)c=b,b=r,r=c,c=z,z=s,s=c;uint v=meshOutIndices.IncrementCounter();int g=v*3;meshOutPoints[g]=t;meshOutIndices[v][0]=g+outMeshIndexOffset;meshOutColors[g]=float4(x,1);g=v*3+1;meshOutPoints[g]=r;meshOutIndices[v][1]=g+outMeshIndexOffset;meshOutColors[g]=float4(s,1);g=v*3+2;meshOutPoints[g]=m;meshOutIndices[v][2]=g+outMeshIndexOffset;meshOutColors[g]=float4(y,1);v=meshOutIndices.IncrementCounter();g=v*3;meshOutPoints[g]=t;meshOutIndices[v][0]=g+outMeshIndexOffset;meshOutColors[g]=float4(x,1);g=v*3+1;meshOutPoints[g]=m;meshOutIndices[v][1]=g+outMeshIndexOffset;meshOutColors[g]=float4(y,1);g=v*3+2;meshOutPoints[g]=b;meshOutIndices[v][2]=g+outMeshIndexOffset;meshOutColors[g]=float4(z,1);}n=f(i.x+1,i.y+1,i.z,256);I=gridData[n];if(sign(u.x)!=sign(I.x)){r=a(int3(i.x,i.y+1,i.z),s)+e;m=a(int3(i.x+1,i.y+1,i.z),y)+e;b=a(int3(i.x+1,i.y,i.z),z)+e;if(u.x>I.x)c=b,b=r,r=c,c=z,z=s,s=c;uint g=meshOutIndices.IncrementCounter();int v=g*3;meshOutPoints[v]=t;meshOutIndices[g][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=g*3+1;meshOutPoints[v]=r;meshOutIndices[g][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(s,1);v=g*3+2;meshOutPoints[v]=m;meshOutIndices[g][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);g=meshOutIndices.IncrementCounter();v=g*3;meshOutPoints[v]=t;meshOutIndices[g][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=g*3+1;meshOutPoints[v]=m;meshOutIndices[g][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);v=g*3+2;meshOutPoints[v]=b;meshOutIndices[g][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(z,1);}}[numthreads(1,1,1)]void filterSolidsPerChunk(int3 f:SV_DispatchThreadID){int S=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;float x=chunkSize*.00390625*seamOffsetMultiplier,i=chunkSize-x,u=chunkSize*.5;float3 e=float3(-(chunkSize*numChunksX*.5)+u+i*f.x,-(chunkSize*numChunksY*.5)+u+i*f.y,-(chunkSize*numChunksZ*.5)+u+i*f.z);chunksCenter[S]=e;int m=S*3,r=updateChunks[S]-1;if(r<-1)r=-1;int v=0;float c=chunkSize*.5,b=2.-globalBlendReduce;for(uint y=0;y<numSolids;++y){float3 s=e;if(checkMirrorX(solidsAttrs[y].w))s.x=abs(s.x);float3 z=solidsPos[y],M=solidsScale[y];float4 D=solidsRot[y];float3 a=s-z,o=mulQuat(a,D);float k=t(o,M)-b;if(abs(k)<chunkSize*.8){solidsPerChunk[S*maxSolids+v]=y;v+=1;if(r<=0){for(uint g=0;g<numSolidsUpdated;++g){uint I=solidsUpdated[g];if(I==y){r=1;break;}}}}}numSolidsPerChunk[S]=v;uint s=0,g=0;if(r>-1){s=64/MAXTHREADS;g=256/MAXTHREADS;uint z=S*6;boundingBox[z]=64;boundingBox[z+1]=64;boundingBox[z+2]=64;boundingBox[z+3]=0;boundingBox[z+4]=0;boundingBox[z+5]=0;numPointsInChunk[S]=0;}updateChunks[S]=r;indirectChunkArgs1[m]=s;indirectChunkArgs1[m+1]=s;indirectChunkArgs1[m+2]=s;indirectChunkArgs2[m]=g;indirectChunkArgs2[m+1]=g;indirectChunkArgs2[m+2]=g;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloudMicroVoxels(int3 u:SV_DispatchThreadID){int e=f(u.x,u.y,u.z,64);uint x=262144,v=chunkId*x,S=v+e;gridPointersMip2[S]=-1;if(gridDataLowRes[e].x==999.){return;}float3 m=float3(0,0,0),s=float3(0,0,0),b=float3(0,0,0);int y=0;for(uint r=0;r<64;++r){int3 t=cellTable[r],z=int3(u.x*4+t.x,u.y*4+t.y,u.z*4+t.z);uint c=f(uint(t.x),uint(t.y),uint(t.z),4),M=0;float a[8]={0,0,0,0,0,0,0,0};int D=0,o=0;for(int k=0;k<8;++k){int3 I=z+localGridCellCoords[k];if(I.x<1||I.y<1||I.z<1||I.x>253||I.y>253||I.z>253){return;}int p=f(I.x,I.y,I.z,256);float3 l=gridData[p];float C=l.x;if(C==0.){continue;}a[k]=C;if(C<=0.)M|=1<<k,o=l.z,D=l.y;}int I=cubeEdgeFlags[M];if(I==0){continue;}int p=M*16;float3 R=float3(0,0,0),l=float3(0,0,0);int C=0;for(int w=0;w<5;++w){int O=w*3,Z=triangleConnectionTable[p+O];if(Z>-1){float X=n(a[edgeConnection[Z].x],a[edgeConnection[Z].y]);float3 h=vertexOffset[edgeConnection[Z].x]-X*edgeDirection[Z];Z=triangleConnectionTable[p+O+1];X=n(a[edgeConnection[Z].x],a[edgeConnection[Z].y]);float3 Y=vertexOffset[edgeConnection[Z].x]-X*edgeDirection[Z];Z=triangleConnectionTable[p+O+2];X=n(a[edgeConnection[Z].x],a[edgeConnection[Z].y]);float3 T=vertexOffset[edgeConnection[Z].x]-X*edgeDirection[Z];R+=h+Y+T;l+=cross(T-h,Y-h);C+=3;}else{break;}}if(C>0){R/=C;float3 O=R-.5;l=normalize(l);float X=dot(O,l);X=X*.5+.5;m+=R;s+=l;float3 Z=l;Z/=abs(Z.x)+abs(Z.y)+abs(Z.z);Z.xy=Z.z>=0.?Z.xy:i(Z.xy);Z.xy=Z.xy*.5+.5;int3 Y=g(D);float3 h=float3(Y.x*.00390625,Y.y*.00390625,Y.z*.00390625);b+=h;uint T=d(c,uint(round(X*255.)),uint(round(Z.x*255.)),uint(round(Z.y*255.))),P=g(uint(round(h.x*63.)),uint(round(h.y*63.)),uint(round(h.z*63.)),o),A=e*128+y*2;prefilteredSolidIds[A]=T;prefilteredSolidIds[A+1]=P;y+=1;}}if(y>0){m/=y;s=normalize(s);b/=y;float3 z=m-.5;float t=dot(z,s);t=t*.5+.5;float3 c=s;c/=abs(c.x)+abs(c.y)+abs(c.z);c.xy=c.z>=0.?c.xy:i(c.xy);c.xy=c.xy*.5+.5;uint k=chunkId*(16777216*bufferSizeReduceFactor),o=0;InterlockedAdd(volumetricDraw[7],64,o);for(uint D=0;D<64;++D)gridPointersMip3[k+o+D]=-1;uint M=0;InterlockedAdd(volumetricDraw[6],y+1,M);uint a=0;for(int I=0;I<y;++I){uint Z=e*128+I*2;int2 l=int2(prefilteredSolidIds[Z],prefilteredSolidIds[Z+1]);pointCloudDataMip3[k+M+I+1]=l;a=l.x>>24;gridPointersMip3[k+o+a]=f(I,M);}uint p=uint(round(c.x*255.)),l=uint(round(c.y*255.)),w=uint(round(t*255.)),O=d(y,p,l,w);int2 C=int2(o,O);pointCloudDataMip3[k+M]=C;gridPointersMip2[S]=M;uint Z=chunkId*6;InterlockedMin(boundingBox[Z],u.x);InterlockedMin(boundingBox[Z+1],u.y);InterlockedMin(boundingBox[Z+2],u.z);InterlockedMax(boundingBox[Z+3],u.x);InterlockedMax(boundingBox[Z+4],u.y);InterlockedMax(boundingBox[Z+5],u.z);}}[numthreads(1,1,1)]void optimizeMicrovoxels(int3 i:SV_DispatchThreadID){int S=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;bool r=true;uint e=262144;for(uint m=0;m<e;++m){int t=gridPointersMip2[S*e+m];if(t>-1){r=false;break;}}if(r){return;}uint t=0;InterlockedAdd(microvoxelCounters[0],262144,t);chunkIdOffset[S]=t;uint y=S*(16777216*bufferSizeReduceFactor);for(uint x=0;x<e;++x){int u=gridPointersMip2[S*e+x];gridPointersMip2Opt[t+x]=-1;if(u>-1){int z=0;InterlockedAdd(microvoxelCounters[1],64,z);uint s=v(pointCloudDataMip3[y+u].y).x;for(uint b=0;b<64;++b)gridPointersMip3Opt[z+b]=-1;uint g=0;InterlockedAdd(microvoxelCounters[2],s+1,g);for(uint o=0;o<s;++o){int c=pointCloudDataMip3[y+u+o+1].x>>24;gridPointersMip3Opt[z+c]=f(o,g);pointCloudDataMip3Opt[g+o+1]=pointCloudDataMip3[y+u+o+1];}int2 c=int2(z,pointCloudDataMip3[y+g].y);pointCloudDataMip3Opt[g]=c;gridPointersMip2Opt[t+x]=g;}}}inline float3 a(int3 i,float x,float s[8]){int S=f(i.x,i.y,i.z,256);float3 e=gridData[S],u=g(i,x);int m=0,M=0;for(int y=0;y<8;++y){int3 t=i+localGridCellCoords[y];int v=f(t.x,t.y,t.z,256);float3 c=gridData[v];s[y]=c.x;if(c.z==0.){continue;}if(c.x<0.)m|=1<<y;}int t=cubeEdgeFlags[m];float c=1.-meshVoxelize;uint v=0;float3 k=float3(0,0,0);for(int r=0;r<12;++r){if((t&1<<r)!=0){float z=s[edgeConnection[r].x],D=s[edgeConnection[r].y],b=n(z,D);k+=u+(vertexOffset[edgeConnection[r].x]-b*edgeDirection[r])*x*c;v+=1;}}k/=v;return k;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMeshRealTime(int3 i:SV_DispatchThreadID){int S=f(i.x,i.y,i.z,256);smoothMeshGridData[S]=int3(-1,-1,-1);if(i.x>253||i.y>253||i.z>253||i.x<1||i.y<1||i.z<1){return;}int m=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[m],t=0.;float x=chunkSize*.00390625,s[8];float3 e=0.,z=a(int3(i.x,i.y,i.z),x,s)+e,r,b,v,c;m=f(i.x,i.y+1,i.z+1,256);float3 I=gridData[m];if(sign(u.x)!=sign(I.x)){r=a(int3(i.x,i.y,i.z+1),x,s)+e;b=a(int3(i.x,i.y+1,i.z+1),x,s)+e;v=a(int3(i.x,i.y+1,i.z),x,s)+e;if(u.x>I.x)c=v,v=r,r=c;uint y=0;InterlockedAdd(indirectDrawArgs[0],6,y);int g=y;meshPoints[g]=z;g=y+1;meshPoints[g]=r;g=y+2;meshPoints[g]=b;g=y+3;meshPoints[g]=z;g=y+4;meshPoints[g]=b;g=y+5;meshPoints[g]=v;t=cross(r-z,b-z);meshNormalsTemp[y]=t;meshNormalsTemp[y+1]=t;meshNormalsTemp[y+2]=t;meshNormalsTemp[y+3]=t;meshNormalsTemp[y+4]=t;meshNormalsTemp[y+5]=t;smoothMeshGridData[S].x=y;}m=f(i.x+1,i.y,i.z+1,256);I=gridData[m];if(sign(u.x)!=sign(I.x)){r=a(int3(i.x,i.y,i.z+1),x,s)+e;b=a(int3(i.x+1,i.y,i.z+1),x,s)+e;v=a(int3(i.x+1,i.y,i.z),x,s)+e;if(u.x<I.x)c=v,v=r,r=c;uint y=0;InterlockedAdd(indirectDrawArgs[0],6,y);int g=y;meshPoints[g]=z;g=y+1;meshPoints[g]=r;g=y+2;meshPoints[g]=b;g=y+3;meshPoints[g]=z;g=y+4;meshPoints[g]=b;g=y+5;meshPoints[g]=v;t=cross(r-z,b-z);meshNormalsTemp[y]=t;meshNormalsTemp[y+1]=t;meshNormalsTemp[y+2]=t;meshNormalsTemp[y+3]=t;meshNormalsTemp[y+4]=t;meshNormalsTemp[y+5]=t;smoothMeshGridData[S].y=y;}m=f(i.x+1,i.y+1,i.z,256);I=gridData[m];if(sign(u.x)!=sign(I.x)){r=a(int3(i.x,i.y+1,i.z),x,s)+e;b=a(int3(i.x+1,i.y+1,i.z),x,s)+e;v=a(int3(i.x+1,i.y,i.z),x,s)+e;if(u.x>I.x)c=v,v=r,r=c;uint y=0;InterlockedAdd(indirectDrawArgs[0],6,y);int g=y;meshPoints[g]=z;g=y+1;meshPoints[g]=r;g=y+2;meshPoints[g]=b;g=y+3;meshPoints[g]=z;g=y+4;meshPoints[g]=b;g=y+5;meshPoints[g]=v;t=cross(r-z,b-z);meshNormalsTemp[y]=t;meshNormalsTemp[y+1]=t;meshNormalsTemp[y+2]=t;meshNormalsTemp[y+3]=t;meshNormalsTemp[y+4]=t;meshNormalsTemp[y+5]=t;smoothMeshGridData[S].z=y;}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMeshRealTime2(int3 u:SV_DispatchThreadID){if(u.x>253||u.y>253||u.z>253||u.x<1||u.y<1||u.z<1){return;}int S=f(u.x,u.y,u.z,256);int3 s=smoothMeshGridData[S];if(s.x==-1&&s.y==-1&&s.z==-1){return;}float3 t=gridData[S],e=a(t.y).xyz;float x=meshNormalSmooth*.00555556;int y=lerp(1,27,x);float z=radians(meshNormalSmooth),v=lerp(0.,.005,meshVoxelize);for(int m=0;m<3;++m){if(s[m]!=-1){uint g=s[m];for(int r=0;r<6;++r){float3 c=meshPoints[g+r],b=meshNormalsTemp[g+r],M=normalize(b),D=e;int k=1;for(int o=0;o<y;++o){int3 I=u+neighbourMip3[o];int n=f(I.x,I.y,I.z,256);int3 p=smoothMeshGridData[n];for(int Z=0;Z<3;++Z){if(p[Z]!=1){uint l=p[Z];for(int R=0;R<6;++R){float3 C=meshPoints[l+R],w=meshNormalsTemp[l+R],O=c-C;float X=dot(O,O),Y=dot(normalize(w),M);if(X<=v&&Y<z){b+=w;uint d=gridData[n].y;D+=a(d).xyz;k+=1;}}}}}float3 I=b;I/=abs(I.x)+abs(I.y)+abs(I.z);I.xy=I.z>=0.?I.xy:i(I.xy);I.xy=I.xy*.5+.5;D/=k;uint p=f(D);float l=t.z;meshNormals[g+r]=float4(I.x,I.y,p,l);}}}}